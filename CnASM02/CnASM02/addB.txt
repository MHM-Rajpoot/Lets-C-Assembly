; Include Irvine library for additional functionalities
Include irvine32.inc

.data
result db 100 dup(0)   ; Buffer to store the result of the addition
return db 100 dup(0)   ; Buffer to store return string if needed
len1 db 0              ; Length of the first input string
len2 db 0              ; Length of the second input string
carry db 0             ; Carry for addition

.code
addB_func PROC C

    ; Save the base pointer and set up the stack frame
    push ebp
    mov ebp, esp

    ; Load the addresses of the input strings into ESI and EDI
    mov esi, [ebp+8]    ; Address of first input string
    mov edi, [ebp+12]   ; Address of second input string

    ; Calculate the length of the first string (stored in len1)
    xor dl, dl          ; Clear DL register (length counter)
loop_esi:
    mov cl, byte ptr [esi]
    cmp cl, 0           ; Check for null terminator
    je end_esi
    inc esi             ; Move to next character
    inc dl              ; Increment length counter
    jmp loop_esi
end_esi:
    mov len1, dl        ; Store the length of the first string in len1

    ; Calculate the length of the second string (stored in len2)
    xor dl, dl          ; Clear DL register (length counter)
loop_edi:
    mov cl, byte ptr [edi]
    cmp cl, 0           ; Check for null terminator
    je end_edi
    inc edi             ; Move to next character
    inc dl              ; Increment length counter
    jmp loop_edi
end_edi:
    mov len2, dl        ; Store the length of the second string in len2

    ; Determine the larger length (either len1 or len2)
    mov dl, len1
    cmp dl, len2
    jg greater_len1
    movzx ecx, len2     ; If len2 is greater or equal, use len2
    jmp done_len
greater_len1:
    movzx ecx, len1     ; If len1 is greater, use len1
done_len:

    ; Initialize the result pointer (EBX) to point to the result buffer
    mov ebx, offset result

    ; Save EBX and ECX on the stack for later use
    push ebx
    push ecx

loop_str:
    cmp ecx, 0          ; Check if all digits are processed
    je loop_st_end      ; Exit loop if done

    dec esi             ; Move to previous character in the first string
    dec edi             ; Move to previous character in the second string

    ; Load the current digits from both input strings
    mov al, byte ptr [esi]
    mov bl, byte ptr [edi]

    ; Convert ASCII to integer by subtracting '0' (48)
    and eax, 0FFh
    sub al, 48

    and ebx, 0FFh
    sub bl, 48

    ; Add the digits along with any carry from the previous addition
    add al, bl
    add al, carry

    ; Reset carry
    mov carry, 0

    ; Check if the sum is 10 or greater (requires a carry)
    cmp al, 10
    jl NoCarry          ; No carry needed if sum is less than 10
    je tencase          ; Special case for exactly 10

    ; Handle carry if sum is greater than 10
    mov ah, 0           ; Clear AH register for division
    mov cl, 10          ; Set divisor to 10
    div cl              ; Divide AL by 10

    pop ecx             ; Restore ECX (loop counter)
    pop ebx             ; Restore EBX (result pointer)

    add ah, 48          ; Convert quotient to ASCII
    mov [ebx], ah       ; Store the result digit
    inc ebx             ; Move to the next position in the result buffer

    dec ecx             ; Decrement loop counter

    push ebx            ; Save updated EBX
    push ecx            ; Save updated ECX

    mov carry, al       ; Set carry for the next iteration

    jmp loop_str        ; Repeat the loop

tencase:
    ; Special case for a sum of exactly 10 (store '0' and set carry to 1)
    pop ecx             ; Restore ECX (loop counter)
    pop ebx             ; Restore EBX (result pointer)

    mov al, 48          ; '0'
    mov [ebx], al       ; Store '0' in result buffer
    inc ebx             ; Move to the next position in the result buffer

    dec ecx             ; Decrement loop counter

    push ebx            ; Save updated EBX
    push ecx            ; Save updated ECX

    mov carry, 1        ; Set carry for the next iteration

    jmp loop_str        ; Repeat the loop

NoCarry:
    ; No carry case: store the sum directly
    pop ecx             ; Restore ECX (loop counter)
    pop ebx             ; Restore EBX (result pointer)

    add al, 48          ; Convert the sum to ASCII
    mov [ebx], al       ; Store the sum in result buffer
    inc ebx             ; Move to the next position in the result buffer

    dec ecx             ; Decrement loop counter

    push ebx            ; Save updated EBX
    push ecx            ; Save updated ECX

    jmp loop_str        ; Repeat the loop

loop_st_end:
    ; After processing all digits, check if there's any remaining carry
    pop ecx             ; Restore ECX (not used)
    pop ebx             ; Restore EBX (result pointer)

    mov al, carry       ; Load carry
    add al, 48          ; Convert carry to ASCII if present
    mov [ebx], al       ; Store carry in result buffer

    inc ebx             ; Move to the next position in the result buffer

    mov al, 0           ; Null-terminate the result string
    mov [ebx], al

    ; Return the pointer to the result buffer in EAX
    mov eax, offset result

    ; Restore the base pointer and return from the procedure
    pop ebp
    ret

addB_func ENDP

END
